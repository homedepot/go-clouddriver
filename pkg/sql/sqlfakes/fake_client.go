// Code generated by counterfeiter. DO NOT EDIT.
package sqlfakes

import (
	"sync"

	clouddriver "github.com/homedepot/go-clouddriver/pkg"
	"github.com/homedepot/go-clouddriver/pkg/kubernetes"
	"github.com/homedepot/go-clouddriver/pkg/sql"
)

type FakeClient struct {
	CreateKubernetesProviderStub        func(kubernetes.Provider) error
	createKubernetesProviderMutex       sync.RWMutex
	createKubernetesProviderArgsForCall []struct {
		arg1 kubernetes.Provider
	}
	createKubernetesProviderReturns struct {
		result1 error
	}
	createKubernetesProviderReturnsOnCall map[int]struct {
		result1 error
	}
	CreateKubernetesResourceStub        func(kubernetes.Resource) error
	createKubernetesResourceMutex       sync.RWMutex
	createKubernetesResourceArgsForCall []struct {
		arg1 kubernetes.Resource
	}
	createKubernetesResourceReturns struct {
		result1 error
	}
	createKubernetesResourceReturnsOnCall map[int]struct {
		result1 error
	}
	CreateReadPermissionStub        func(clouddriver.ReadPermission) error
	createReadPermissionMutex       sync.RWMutex
	createReadPermissionArgsForCall []struct {
		arg1 clouddriver.ReadPermission
	}
	createReadPermissionReturns struct {
		result1 error
	}
	createReadPermissionReturnsOnCall map[int]struct {
		result1 error
	}
	CreateWritePermissionStub        func(clouddriver.WritePermission) error
	createWritePermissionMutex       sync.RWMutex
	createWritePermissionArgsForCall []struct {
		arg1 clouddriver.WritePermission
	}
	createWritePermissionReturns struct {
		result1 error
	}
	createWritePermissionReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteKubernetesProviderStub        func(string) error
	deleteKubernetesProviderMutex       sync.RWMutex
	deleteKubernetesProviderArgsForCall []struct {
		arg1 string
	}
	deleteKubernetesProviderReturns struct {
		result1 error
	}
	deleteKubernetesProviderReturnsOnCall map[int]struct {
		result1 error
	}
	GetKubernetesProviderStub        func(string) (kubernetes.Provider, error)
	getKubernetesProviderMutex       sync.RWMutex
	getKubernetesProviderArgsForCall []struct {
		arg1 string
	}
	getKubernetesProviderReturns struct {
		result1 kubernetes.Provider
		result2 error
	}
	getKubernetesProviderReturnsOnCall map[int]struct {
		result1 kubernetes.Provider
		result2 error
	}
	ListKubernetesAccountsBySpinnakerAppStub        func(string) ([]string, error)
	listKubernetesAccountsBySpinnakerAppMutex       sync.RWMutex
	listKubernetesAccountsBySpinnakerAppArgsForCall []struct {
		arg1 string
	}
	listKubernetesAccountsBySpinnakerAppReturns struct {
		result1 []string
		result2 error
	}
	listKubernetesAccountsBySpinnakerAppReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	ListKubernetesClustersByApplicationStub        func(string) ([]kubernetes.Resource, error)
	listKubernetesClustersByApplicationMutex       sync.RWMutex
	listKubernetesClustersByApplicationArgsForCall []struct {
		arg1 string
	}
	listKubernetesClustersByApplicationReturns struct {
		result1 []kubernetes.Resource
		result2 error
	}
	listKubernetesClustersByApplicationReturnsOnCall map[int]struct {
		result1 []kubernetes.Resource
		result2 error
	}
	ListKubernetesClustersByFieldsStub        func(...string) ([]kubernetes.Resource, error)
	listKubernetesClustersByFieldsMutex       sync.RWMutex
	listKubernetesClustersByFieldsArgsForCall []struct {
		arg1 []string
	}
	listKubernetesClustersByFieldsReturns struct {
		result1 []kubernetes.Resource
		result2 error
	}
	listKubernetesClustersByFieldsReturnsOnCall map[int]struct {
		result1 []kubernetes.Resource
		result2 error
	}
	ListKubernetesProvidersStub        func() ([]kubernetes.Provider, error)
	listKubernetesProvidersMutex       sync.RWMutex
	listKubernetesProvidersArgsForCall []struct {
	}
	listKubernetesProvidersReturns struct {
		result1 []kubernetes.Provider
		result2 error
	}
	listKubernetesProvidersReturnsOnCall map[int]struct {
		result1 []kubernetes.Provider
		result2 error
	}
	ListKubernetesProvidersAndPermissionsStub        func() ([]kubernetes.Provider, error)
	listKubernetesProvidersAndPermissionsMutex       sync.RWMutex
	listKubernetesProvidersAndPermissionsArgsForCall []struct {
	}
	listKubernetesProvidersAndPermissionsReturns struct {
		result1 []kubernetes.Provider
		result2 error
	}
	listKubernetesProvidersAndPermissionsReturnsOnCall map[int]struct {
		result1 []kubernetes.Provider
		result2 error
	}
	ListKubernetesResourceNamesByAccountNameAndKindAndNamespaceStub        func(string, string, string) ([]string, error)
	listKubernetesResourceNamesByAccountNameAndKindAndNamespaceMutex       sync.RWMutex
	listKubernetesResourceNamesByAccountNameAndKindAndNamespaceArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	listKubernetesResourceNamesByAccountNameAndKindAndNamespaceReturns struct {
		result1 []string
		result2 error
	}
	listKubernetesResourceNamesByAccountNameAndKindAndNamespaceReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	ListKubernetesResourcesByFieldsStub        func(...string) ([]kubernetes.Resource, error)
	listKubernetesResourcesByFieldsMutex       sync.RWMutex
	listKubernetesResourcesByFieldsArgsForCall []struct {
		arg1 []string
	}
	listKubernetesResourcesByFieldsReturns struct {
		result1 []kubernetes.Resource
		result2 error
	}
	listKubernetesResourcesByFieldsReturnsOnCall map[int]struct {
		result1 []kubernetes.Resource
		result2 error
	}
	ListKubernetesResourcesByTaskIDStub        func(string) ([]kubernetes.Resource, error)
	listKubernetesResourcesByTaskIDMutex       sync.RWMutex
	listKubernetesResourcesByTaskIDArgsForCall []struct {
		arg1 string
	}
	listKubernetesResourcesByTaskIDReturns struct {
		result1 []kubernetes.Resource
		result2 error
	}
	listKubernetesResourcesByTaskIDReturnsOnCall map[int]struct {
		result1 []kubernetes.Resource
		result2 error
	}
	ListReadGroupsByAccountNameStub        func(string) ([]string, error)
	listReadGroupsByAccountNameMutex       sync.RWMutex
	listReadGroupsByAccountNameArgsForCall []struct {
		arg1 string
	}
	listReadGroupsByAccountNameReturns struct {
		result1 []string
		result2 error
	}
	listReadGroupsByAccountNameReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	ListWriteGroupsByAccountNameStub        func(string) ([]string, error)
	listWriteGroupsByAccountNameMutex       sync.RWMutex
	listWriteGroupsByAccountNameArgsForCall []struct {
		arg1 string
	}
	listWriteGroupsByAccountNameReturns struct {
		result1 []string
		result2 error
	}
	listWriteGroupsByAccountNameReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) CreateKubernetesProvider(arg1 kubernetes.Provider) error {
	fake.createKubernetesProviderMutex.Lock()
	ret, specificReturn := fake.createKubernetesProviderReturnsOnCall[len(fake.createKubernetesProviderArgsForCall)]
	fake.createKubernetesProviderArgsForCall = append(fake.createKubernetesProviderArgsForCall, struct {
		arg1 kubernetes.Provider
	}{arg1})
	fake.recordInvocation("CreateKubernetesProvider", []interface{}{arg1})
	fake.createKubernetesProviderMutex.Unlock()
	if fake.CreateKubernetesProviderStub != nil {
		return fake.CreateKubernetesProviderStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createKubernetesProviderReturns
	return fakeReturns.result1
}

func (fake *FakeClient) CreateKubernetesProviderCallCount() int {
	fake.createKubernetesProviderMutex.RLock()
	defer fake.createKubernetesProviderMutex.RUnlock()
	return len(fake.createKubernetesProviderArgsForCall)
}

func (fake *FakeClient) CreateKubernetesProviderCalls(stub func(kubernetes.Provider) error) {
	fake.createKubernetesProviderMutex.Lock()
	defer fake.createKubernetesProviderMutex.Unlock()
	fake.CreateKubernetesProviderStub = stub
}

func (fake *FakeClient) CreateKubernetesProviderArgsForCall(i int) kubernetes.Provider {
	fake.createKubernetesProviderMutex.RLock()
	defer fake.createKubernetesProviderMutex.RUnlock()
	argsForCall := fake.createKubernetesProviderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) CreateKubernetesProviderReturns(result1 error) {
	fake.createKubernetesProviderMutex.Lock()
	defer fake.createKubernetesProviderMutex.Unlock()
	fake.CreateKubernetesProviderStub = nil
	fake.createKubernetesProviderReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) CreateKubernetesProviderReturnsOnCall(i int, result1 error) {
	fake.createKubernetesProviderMutex.Lock()
	defer fake.createKubernetesProviderMutex.Unlock()
	fake.CreateKubernetesProviderStub = nil
	if fake.createKubernetesProviderReturnsOnCall == nil {
		fake.createKubernetesProviderReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createKubernetesProviderReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) CreateKubernetesResource(arg1 kubernetes.Resource) error {
	fake.createKubernetesResourceMutex.Lock()
	ret, specificReturn := fake.createKubernetesResourceReturnsOnCall[len(fake.createKubernetesResourceArgsForCall)]
	fake.createKubernetesResourceArgsForCall = append(fake.createKubernetesResourceArgsForCall, struct {
		arg1 kubernetes.Resource
	}{arg1})
	fake.recordInvocation("CreateKubernetesResource", []interface{}{arg1})
	fake.createKubernetesResourceMutex.Unlock()
	if fake.CreateKubernetesResourceStub != nil {
		return fake.CreateKubernetesResourceStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createKubernetesResourceReturns
	return fakeReturns.result1
}

func (fake *FakeClient) CreateKubernetesResourceCallCount() int {
	fake.createKubernetesResourceMutex.RLock()
	defer fake.createKubernetesResourceMutex.RUnlock()
	return len(fake.createKubernetesResourceArgsForCall)
}

func (fake *FakeClient) CreateKubernetesResourceCalls(stub func(kubernetes.Resource) error) {
	fake.createKubernetesResourceMutex.Lock()
	defer fake.createKubernetesResourceMutex.Unlock()
	fake.CreateKubernetesResourceStub = stub
}

func (fake *FakeClient) CreateKubernetesResourceArgsForCall(i int) kubernetes.Resource {
	fake.createKubernetesResourceMutex.RLock()
	defer fake.createKubernetesResourceMutex.RUnlock()
	argsForCall := fake.createKubernetesResourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) CreateKubernetesResourceReturns(result1 error) {
	fake.createKubernetesResourceMutex.Lock()
	defer fake.createKubernetesResourceMutex.Unlock()
	fake.CreateKubernetesResourceStub = nil
	fake.createKubernetesResourceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) CreateKubernetesResourceReturnsOnCall(i int, result1 error) {
	fake.createKubernetesResourceMutex.Lock()
	defer fake.createKubernetesResourceMutex.Unlock()
	fake.CreateKubernetesResourceStub = nil
	if fake.createKubernetesResourceReturnsOnCall == nil {
		fake.createKubernetesResourceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createKubernetesResourceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) CreateReadPermission(arg1 clouddriver.ReadPermission) error {
	fake.createReadPermissionMutex.Lock()
	ret, specificReturn := fake.createReadPermissionReturnsOnCall[len(fake.createReadPermissionArgsForCall)]
	fake.createReadPermissionArgsForCall = append(fake.createReadPermissionArgsForCall, struct {
		arg1 clouddriver.ReadPermission
	}{arg1})
	fake.recordInvocation("CreateReadPermission", []interface{}{arg1})
	fake.createReadPermissionMutex.Unlock()
	if fake.CreateReadPermissionStub != nil {
		return fake.CreateReadPermissionStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createReadPermissionReturns
	return fakeReturns.result1
}

func (fake *FakeClient) CreateReadPermissionCallCount() int {
	fake.createReadPermissionMutex.RLock()
	defer fake.createReadPermissionMutex.RUnlock()
	return len(fake.createReadPermissionArgsForCall)
}

func (fake *FakeClient) CreateReadPermissionCalls(stub func(clouddriver.ReadPermission) error) {
	fake.createReadPermissionMutex.Lock()
	defer fake.createReadPermissionMutex.Unlock()
	fake.CreateReadPermissionStub = stub
}

func (fake *FakeClient) CreateReadPermissionArgsForCall(i int) clouddriver.ReadPermission {
	fake.createReadPermissionMutex.RLock()
	defer fake.createReadPermissionMutex.RUnlock()
	argsForCall := fake.createReadPermissionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) CreateReadPermissionReturns(result1 error) {
	fake.createReadPermissionMutex.Lock()
	defer fake.createReadPermissionMutex.Unlock()
	fake.CreateReadPermissionStub = nil
	fake.createReadPermissionReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) CreateReadPermissionReturnsOnCall(i int, result1 error) {
	fake.createReadPermissionMutex.Lock()
	defer fake.createReadPermissionMutex.Unlock()
	fake.CreateReadPermissionStub = nil
	if fake.createReadPermissionReturnsOnCall == nil {
		fake.createReadPermissionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReadPermissionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) CreateWritePermission(arg1 clouddriver.WritePermission) error {
	fake.createWritePermissionMutex.Lock()
	ret, specificReturn := fake.createWritePermissionReturnsOnCall[len(fake.createWritePermissionArgsForCall)]
	fake.createWritePermissionArgsForCall = append(fake.createWritePermissionArgsForCall, struct {
		arg1 clouddriver.WritePermission
	}{arg1})
	fake.recordInvocation("CreateWritePermission", []interface{}{arg1})
	fake.createWritePermissionMutex.Unlock()
	if fake.CreateWritePermissionStub != nil {
		return fake.CreateWritePermissionStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createWritePermissionReturns
	return fakeReturns.result1
}

func (fake *FakeClient) CreateWritePermissionCallCount() int {
	fake.createWritePermissionMutex.RLock()
	defer fake.createWritePermissionMutex.RUnlock()
	return len(fake.createWritePermissionArgsForCall)
}

func (fake *FakeClient) CreateWritePermissionCalls(stub func(clouddriver.WritePermission) error) {
	fake.createWritePermissionMutex.Lock()
	defer fake.createWritePermissionMutex.Unlock()
	fake.CreateWritePermissionStub = stub
}

func (fake *FakeClient) CreateWritePermissionArgsForCall(i int) clouddriver.WritePermission {
	fake.createWritePermissionMutex.RLock()
	defer fake.createWritePermissionMutex.RUnlock()
	argsForCall := fake.createWritePermissionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) CreateWritePermissionReturns(result1 error) {
	fake.createWritePermissionMutex.Lock()
	defer fake.createWritePermissionMutex.Unlock()
	fake.CreateWritePermissionStub = nil
	fake.createWritePermissionReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) CreateWritePermissionReturnsOnCall(i int, result1 error) {
	fake.createWritePermissionMutex.Lock()
	defer fake.createWritePermissionMutex.Unlock()
	fake.CreateWritePermissionStub = nil
	if fake.createWritePermissionReturnsOnCall == nil {
		fake.createWritePermissionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createWritePermissionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeleteKubernetesProvider(arg1 string) error {
	fake.deleteKubernetesProviderMutex.Lock()
	ret, specificReturn := fake.deleteKubernetesProviderReturnsOnCall[len(fake.deleteKubernetesProviderArgsForCall)]
	fake.deleteKubernetesProviderArgsForCall = append(fake.deleteKubernetesProviderArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteKubernetesProvider", []interface{}{arg1})
	fake.deleteKubernetesProviderMutex.Unlock()
	if fake.DeleteKubernetesProviderStub != nil {
		return fake.DeleteKubernetesProviderStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteKubernetesProviderReturns
	return fakeReturns.result1
}

func (fake *FakeClient) DeleteKubernetesProviderCallCount() int {
	fake.deleteKubernetesProviderMutex.RLock()
	defer fake.deleteKubernetesProviderMutex.RUnlock()
	return len(fake.deleteKubernetesProviderArgsForCall)
}

func (fake *FakeClient) DeleteKubernetesProviderCalls(stub func(string) error) {
	fake.deleteKubernetesProviderMutex.Lock()
	defer fake.deleteKubernetesProviderMutex.Unlock()
	fake.DeleteKubernetesProviderStub = stub
}

func (fake *FakeClient) DeleteKubernetesProviderArgsForCall(i int) string {
	fake.deleteKubernetesProviderMutex.RLock()
	defer fake.deleteKubernetesProviderMutex.RUnlock()
	argsForCall := fake.deleteKubernetesProviderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) DeleteKubernetesProviderReturns(result1 error) {
	fake.deleteKubernetesProviderMutex.Lock()
	defer fake.deleteKubernetesProviderMutex.Unlock()
	fake.DeleteKubernetesProviderStub = nil
	fake.deleteKubernetesProviderReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeleteKubernetesProviderReturnsOnCall(i int, result1 error) {
	fake.deleteKubernetesProviderMutex.Lock()
	defer fake.deleteKubernetesProviderMutex.Unlock()
	fake.DeleteKubernetesProviderStub = nil
	if fake.deleteKubernetesProviderReturnsOnCall == nil {
		fake.deleteKubernetesProviderReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteKubernetesProviderReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) GetKubernetesProvider(arg1 string) (kubernetes.Provider, error) {
	fake.getKubernetesProviderMutex.Lock()
	ret, specificReturn := fake.getKubernetesProviderReturnsOnCall[len(fake.getKubernetesProviderArgsForCall)]
	fake.getKubernetesProviderArgsForCall = append(fake.getKubernetesProviderArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetKubernetesProvider", []interface{}{arg1})
	fake.getKubernetesProviderMutex.Unlock()
	if fake.GetKubernetesProviderStub != nil {
		return fake.GetKubernetesProviderStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getKubernetesProviderReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetKubernetesProviderCallCount() int {
	fake.getKubernetesProviderMutex.RLock()
	defer fake.getKubernetesProviderMutex.RUnlock()
	return len(fake.getKubernetesProviderArgsForCall)
}

func (fake *FakeClient) GetKubernetesProviderCalls(stub func(string) (kubernetes.Provider, error)) {
	fake.getKubernetesProviderMutex.Lock()
	defer fake.getKubernetesProviderMutex.Unlock()
	fake.GetKubernetesProviderStub = stub
}

func (fake *FakeClient) GetKubernetesProviderArgsForCall(i int) string {
	fake.getKubernetesProviderMutex.RLock()
	defer fake.getKubernetesProviderMutex.RUnlock()
	argsForCall := fake.getKubernetesProviderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) GetKubernetesProviderReturns(result1 kubernetes.Provider, result2 error) {
	fake.getKubernetesProviderMutex.Lock()
	defer fake.getKubernetesProviderMutex.Unlock()
	fake.GetKubernetesProviderStub = nil
	fake.getKubernetesProviderReturns = struct {
		result1 kubernetes.Provider
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetKubernetesProviderReturnsOnCall(i int, result1 kubernetes.Provider, result2 error) {
	fake.getKubernetesProviderMutex.Lock()
	defer fake.getKubernetesProviderMutex.Unlock()
	fake.GetKubernetesProviderStub = nil
	if fake.getKubernetesProviderReturnsOnCall == nil {
		fake.getKubernetesProviderReturnsOnCall = make(map[int]struct {
			result1 kubernetes.Provider
			result2 error
		})
	}
	fake.getKubernetesProviderReturnsOnCall[i] = struct {
		result1 kubernetes.Provider
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListKubernetesAccountsBySpinnakerApp(arg1 string) ([]string, error) {
	fake.listKubernetesAccountsBySpinnakerAppMutex.Lock()
	ret, specificReturn := fake.listKubernetesAccountsBySpinnakerAppReturnsOnCall[len(fake.listKubernetesAccountsBySpinnakerAppArgsForCall)]
	fake.listKubernetesAccountsBySpinnakerAppArgsForCall = append(fake.listKubernetesAccountsBySpinnakerAppArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListKubernetesAccountsBySpinnakerApp", []interface{}{arg1})
	fake.listKubernetesAccountsBySpinnakerAppMutex.Unlock()
	if fake.ListKubernetesAccountsBySpinnakerAppStub != nil {
		return fake.ListKubernetesAccountsBySpinnakerAppStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listKubernetesAccountsBySpinnakerAppReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListKubernetesAccountsBySpinnakerAppCallCount() int {
	fake.listKubernetesAccountsBySpinnakerAppMutex.RLock()
	defer fake.listKubernetesAccountsBySpinnakerAppMutex.RUnlock()
	return len(fake.listKubernetesAccountsBySpinnakerAppArgsForCall)
}

func (fake *FakeClient) ListKubernetesAccountsBySpinnakerAppCalls(stub func(string) ([]string, error)) {
	fake.listKubernetesAccountsBySpinnakerAppMutex.Lock()
	defer fake.listKubernetesAccountsBySpinnakerAppMutex.Unlock()
	fake.ListKubernetesAccountsBySpinnakerAppStub = stub
}

func (fake *FakeClient) ListKubernetesAccountsBySpinnakerAppArgsForCall(i int) string {
	fake.listKubernetesAccountsBySpinnakerAppMutex.RLock()
	defer fake.listKubernetesAccountsBySpinnakerAppMutex.RUnlock()
	argsForCall := fake.listKubernetesAccountsBySpinnakerAppArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ListKubernetesAccountsBySpinnakerAppReturns(result1 []string, result2 error) {
	fake.listKubernetesAccountsBySpinnakerAppMutex.Lock()
	defer fake.listKubernetesAccountsBySpinnakerAppMutex.Unlock()
	fake.ListKubernetesAccountsBySpinnakerAppStub = nil
	fake.listKubernetesAccountsBySpinnakerAppReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListKubernetesAccountsBySpinnakerAppReturnsOnCall(i int, result1 []string, result2 error) {
	fake.listKubernetesAccountsBySpinnakerAppMutex.Lock()
	defer fake.listKubernetesAccountsBySpinnakerAppMutex.Unlock()
	fake.ListKubernetesAccountsBySpinnakerAppStub = nil
	if fake.listKubernetesAccountsBySpinnakerAppReturnsOnCall == nil {
		fake.listKubernetesAccountsBySpinnakerAppReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.listKubernetesAccountsBySpinnakerAppReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListKubernetesClustersByApplication(arg1 string) ([]kubernetes.Resource, error) {
	fake.listKubernetesClustersByApplicationMutex.Lock()
	ret, specificReturn := fake.listKubernetesClustersByApplicationReturnsOnCall[len(fake.listKubernetesClustersByApplicationArgsForCall)]
	fake.listKubernetesClustersByApplicationArgsForCall = append(fake.listKubernetesClustersByApplicationArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListKubernetesClustersByApplication", []interface{}{arg1})
	fake.listKubernetesClustersByApplicationMutex.Unlock()
	if fake.ListKubernetesClustersByApplicationStub != nil {
		return fake.ListKubernetesClustersByApplicationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listKubernetesClustersByApplicationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListKubernetesClustersByApplicationCallCount() int {
	fake.listKubernetesClustersByApplicationMutex.RLock()
	defer fake.listKubernetesClustersByApplicationMutex.RUnlock()
	return len(fake.listKubernetesClustersByApplicationArgsForCall)
}

func (fake *FakeClient) ListKubernetesClustersByApplicationCalls(stub func(string) ([]kubernetes.Resource, error)) {
	fake.listKubernetesClustersByApplicationMutex.Lock()
	defer fake.listKubernetesClustersByApplicationMutex.Unlock()
	fake.ListKubernetesClustersByApplicationStub = stub
}

func (fake *FakeClient) ListKubernetesClustersByApplicationArgsForCall(i int) string {
	fake.listKubernetesClustersByApplicationMutex.RLock()
	defer fake.listKubernetesClustersByApplicationMutex.RUnlock()
	argsForCall := fake.listKubernetesClustersByApplicationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ListKubernetesClustersByApplicationReturns(result1 []kubernetes.Resource, result2 error) {
	fake.listKubernetesClustersByApplicationMutex.Lock()
	defer fake.listKubernetesClustersByApplicationMutex.Unlock()
	fake.ListKubernetesClustersByApplicationStub = nil
	fake.listKubernetesClustersByApplicationReturns = struct {
		result1 []kubernetes.Resource
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListKubernetesClustersByApplicationReturnsOnCall(i int, result1 []kubernetes.Resource, result2 error) {
	fake.listKubernetesClustersByApplicationMutex.Lock()
	defer fake.listKubernetesClustersByApplicationMutex.Unlock()
	fake.ListKubernetesClustersByApplicationStub = nil
	if fake.listKubernetesClustersByApplicationReturnsOnCall == nil {
		fake.listKubernetesClustersByApplicationReturnsOnCall = make(map[int]struct {
			result1 []kubernetes.Resource
			result2 error
		})
	}
	fake.listKubernetesClustersByApplicationReturnsOnCall[i] = struct {
		result1 []kubernetes.Resource
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListKubernetesClustersByFields(arg1 ...string) ([]kubernetes.Resource, error) {
	fake.listKubernetesClustersByFieldsMutex.Lock()
	ret, specificReturn := fake.listKubernetesClustersByFieldsReturnsOnCall[len(fake.listKubernetesClustersByFieldsArgsForCall)]
	fake.listKubernetesClustersByFieldsArgsForCall = append(fake.listKubernetesClustersByFieldsArgsForCall, struct {
		arg1 []string
	}{arg1})
	fake.recordInvocation("ListKubernetesClustersByFields", []interface{}{arg1})
	fake.listKubernetesClustersByFieldsMutex.Unlock()
	if fake.ListKubernetesClustersByFieldsStub != nil {
		return fake.ListKubernetesClustersByFieldsStub(arg1...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listKubernetesClustersByFieldsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListKubernetesClustersByFieldsCallCount() int {
	fake.listKubernetesClustersByFieldsMutex.RLock()
	defer fake.listKubernetesClustersByFieldsMutex.RUnlock()
	return len(fake.listKubernetesClustersByFieldsArgsForCall)
}

func (fake *FakeClient) ListKubernetesClustersByFieldsCalls(stub func(...string) ([]kubernetes.Resource, error)) {
	fake.listKubernetesClustersByFieldsMutex.Lock()
	defer fake.listKubernetesClustersByFieldsMutex.Unlock()
	fake.ListKubernetesClustersByFieldsStub = stub
}

func (fake *FakeClient) ListKubernetesClustersByFieldsArgsForCall(i int) []string {
	fake.listKubernetesClustersByFieldsMutex.RLock()
	defer fake.listKubernetesClustersByFieldsMutex.RUnlock()
	argsForCall := fake.listKubernetesClustersByFieldsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ListKubernetesClustersByFieldsReturns(result1 []kubernetes.Resource, result2 error) {
	fake.listKubernetesClustersByFieldsMutex.Lock()
	defer fake.listKubernetesClustersByFieldsMutex.Unlock()
	fake.ListKubernetesClustersByFieldsStub = nil
	fake.listKubernetesClustersByFieldsReturns = struct {
		result1 []kubernetes.Resource
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListKubernetesClustersByFieldsReturnsOnCall(i int, result1 []kubernetes.Resource, result2 error) {
	fake.listKubernetesClustersByFieldsMutex.Lock()
	defer fake.listKubernetesClustersByFieldsMutex.Unlock()
	fake.ListKubernetesClustersByFieldsStub = nil
	if fake.listKubernetesClustersByFieldsReturnsOnCall == nil {
		fake.listKubernetesClustersByFieldsReturnsOnCall = make(map[int]struct {
			result1 []kubernetes.Resource
			result2 error
		})
	}
	fake.listKubernetesClustersByFieldsReturnsOnCall[i] = struct {
		result1 []kubernetes.Resource
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListKubernetesProviders() ([]kubernetes.Provider, error) {
	fake.listKubernetesProvidersMutex.Lock()
	ret, specificReturn := fake.listKubernetesProvidersReturnsOnCall[len(fake.listKubernetesProvidersArgsForCall)]
	fake.listKubernetesProvidersArgsForCall = append(fake.listKubernetesProvidersArgsForCall, struct {
	}{})
	fake.recordInvocation("ListKubernetesProviders", []interface{}{})
	fake.listKubernetesProvidersMutex.Unlock()
	if fake.ListKubernetesProvidersStub != nil {
		return fake.ListKubernetesProvidersStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listKubernetesProvidersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListKubernetesProvidersCallCount() int {
	fake.listKubernetesProvidersMutex.RLock()
	defer fake.listKubernetesProvidersMutex.RUnlock()
	return len(fake.listKubernetesProvidersArgsForCall)
}

func (fake *FakeClient) ListKubernetesProvidersCalls(stub func() ([]kubernetes.Provider, error)) {
	fake.listKubernetesProvidersMutex.Lock()
	defer fake.listKubernetesProvidersMutex.Unlock()
	fake.ListKubernetesProvidersStub = stub
}

func (fake *FakeClient) ListKubernetesProvidersReturns(result1 []kubernetes.Provider, result2 error) {
	fake.listKubernetesProvidersMutex.Lock()
	defer fake.listKubernetesProvidersMutex.Unlock()
	fake.ListKubernetesProvidersStub = nil
	fake.listKubernetesProvidersReturns = struct {
		result1 []kubernetes.Provider
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListKubernetesProvidersReturnsOnCall(i int, result1 []kubernetes.Provider, result2 error) {
	fake.listKubernetesProvidersMutex.Lock()
	defer fake.listKubernetesProvidersMutex.Unlock()
	fake.ListKubernetesProvidersStub = nil
	if fake.listKubernetesProvidersReturnsOnCall == nil {
		fake.listKubernetesProvidersReturnsOnCall = make(map[int]struct {
			result1 []kubernetes.Provider
			result2 error
		})
	}
	fake.listKubernetesProvidersReturnsOnCall[i] = struct {
		result1 []kubernetes.Provider
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListKubernetesProvidersAndPermissions() ([]kubernetes.Provider, error) {
	fake.listKubernetesProvidersAndPermissionsMutex.Lock()
	ret, specificReturn := fake.listKubernetesProvidersAndPermissionsReturnsOnCall[len(fake.listKubernetesProvidersAndPermissionsArgsForCall)]
	fake.listKubernetesProvidersAndPermissionsArgsForCall = append(fake.listKubernetesProvidersAndPermissionsArgsForCall, struct {
	}{})
	fake.recordInvocation("ListKubernetesProvidersAndPermissions", []interface{}{})
	fake.listKubernetesProvidersAndPermissionsMutex.Unlock()
	if fake.ListKubernetesProvidersAndPermissionsStub != nil {
		return fake.ListKubernetesProvidersAndPermissionsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listKubernetesProvidersAndPermissionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListKubernetesProvidersAndPermissionsCallCount() int {
	fake.listKubernetesProvidersAndPermissionsMutex.RLock()
	defer fake.listKubernetesProvidersAndPermissionsMutex.RUnlock()
	return len(fake.listKubernetesProvidersAndPermissionsArgsForCall)
}

func (fake *FakeClient) ListKubernetesProvidersAndPermissionsCalls(stub func() ([]kubernetes.Provider, error)) {
	fake.listKubernetesProvidersAndPermissionsMutex.Lock()
	defer fake.listKubernetesProvidersAndPermissionsMutex.Unlock()
	fake.ListKubernetesProvidersAndPermissionsStub = stub
}

func (fake *FakeClient) ListKubernetesProvidersAndPermissionsReturns(result1 []kubernetes.Provider, result2 error) {
	fake.listKubernetesProvidersAndPermissionsMutex.Lock()
	defer fake.listKubernetesProvidersAndPermissionsMutex.Unlock()
	fake.ListKubernetesProvidersAndPermissionsStub = nil
	fake.listKubernetesProvidersAndPermissionsReturns = struct {
		result1 []kubernetes.Provider
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListKubernetesProvidersAndPermissionsReturnsOnCall(i int, result1 []kubernetes.Provider, result2 error) {
	fake.listKubernetesProvidersAndPermissionsMutex.Lock()
	defer fake.listKubernetesProvidersAndPermissionsMutex.Unlock()
	fake.ListKubernetesProvidersAndPermissionsStub = nil
	if fake.listKubernetesProvidersAndPermissionsReturnsOnCall == nil {
		fake.listKubernetesProvidersAndPermissionsReturnsOnCall = make(map[int]struct {
			result1 []kubernetes.Provider
			result2 error
		})
	}
	fake.listKubernetesProvidersAndPermissionsReturnsOnCall[i] = struct {
		result1 []kubernetes.Provider
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListKubernetesResourceNamesByAccountNameAndKindAndNamespace(arg1 string, arg2 string, arg3 string) ([]string, error) {
	fake.listKubernetesResourceNamesByAccountNameAndKindAndNamespaceMutex.Lock()
	ret, specificReturn := fake.listKubernetesResourceNamesByAccountNameAndKindAndNamespaceReturnsOnCall[len(fake.listKubernetesResourceNamesByAccountNameAndKindAndNamespaceArgsForCall)]
	fake.listKubernetesResourceNamesByAccountNameAndKindAndNamespaceArgsForCall = append(fake.listKubernetesResourceNamesByAccountNameAndKindAndNamespaceArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListKubernetesResourceNamesByAccountNameAndKindAndNamespace", []interface{}{arg1, arg2, arg3})
	fake.listKubernetesResourceNamesByAccountNameAndKindAndNamespaceMutex.Unlock()
	if fake.ListKubernetesResourceNamesByAccountNameAndKindAndNamespaceStub != nil {
		return fake.ListKubernetesResourceNamesByAccountNameAndKindAndNamespaceStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listKubernetesResourceNamesByAccountNameAndKindAndNamespaceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListKubernetesResourceNamesByAccountNameAndKindAndNamespaceCallCount() int {
	fake.listKubernetesResourceNamesByAccountNameAndKindAndNamespaceMutex.RLock()
	defer fake.listKubernetesResourceNamesByAccountNameAndKindAndNamespaceMutex.RUnlock()
	return len(fake.listKubernetesResourceNamesByAccountNameAndKindAndNamespaceArgsForCall)
}

func (fake *FakeClient) ListKubernetesResourceNamesByAccountNameAndKindAndNamespaceCalls(stub func(string, string, string) ([]string, error)) {
	fake.listKubernetesResourceNamesByAccountNameAndKindAndNamespaceMutex.Lock()
	defer fake.listKubernetesResourceNamesByAccountNameAndKindAndNamespaceMutex.Unlock()
	fake.ListKubernetesResourceNamesByAccountNameAndKindAndNamespaceStub = stub
}

func (fake *FakeClient) ListKubernetesResourceNamesByAccountNameAndKindAndNamespaceArgsForCall(i int) (string, string, string) {
	fake.listKubernetesResourceNamesByAccountNameAndKindAndNamespaceMutex.RLock()
	defer fake.listKubernetesResourceNamesByAccountNameAndKindAndNamespaceMutex.RUnlock()
	argsForCall := fake.listKubernetesResourceNamesByAccountNameAndKindAndNamespaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) ListKubernetesResourceNamesByAccountNameAndKindAndNamespaceReturns(result1 []string, result2 error) {
	fake.listKubernetesResourceNamesByAccountNameAndKindAndNamespaceMutex.Lock()
	defer fake.listKubernetesResourceNamesByAccountNameAndKindAndNamespaceMutex.Unlock()
	fake.ListKubernetesResourceNamesByAccountNameAndKindAndNamespaceStub = nil
	fake.listKubernetesResourceNamesByAccountNameAndKindAndNamespaceReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListKubernetesResourceNamesByAccountNameAndKindAndNamespaceReturnsOnCall(i int, result1 []string, result2 error) {
	fake.listKubernetesResourceNamesByAccountNameAndKindAndNamespaceMutex.Lock()
	defer fake.listKubernetesResourceNamesByAccountNameAndKindAndNamespaceMutex.Unlock()
	fake.ListKubernetesResourceNamesByAccountNameAndKindAndNamespaceStub = nil
	if fake.listKubernetesResourceNamesByAccountNameAndKindAndNamespaceReturnsOnCall == nil {
		fake.listKubernetesResourceNamesByAccountNameAndKindAndNamespaceReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.listKubernetesResourceNamesByAccountNameAndKindAndNamespaceReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListKubernetesResourcesByFields(arg1 ...string) ([]kubernetes.Resource, error) {
	fake.listKubernetesResourcesByFieldsMutex.Lock()
	ret, specificReturn := fake.listKubernetesResourcesByFieldsReturnsOnCall[len(fake.listKubernetesResourcesByFieldsArgsForCall)]
	fake.listKubernetesResourcesByFieldsArgsForCall = append(fake.listKubernetesResourcesByFieldsArgsForCall, struct {
		arg1 []string
	}{arg1})
	fake.recordInvocation("ListKubernetesResourcesByFields", []interface{}{arg1})
	fake.listKubernetesResourcesByFieldsMutex.Unlock()
	if fake.ListKubernetesResourcesByFieldsStub != nil {
		return fake.ListKubernetesResourcesByFieldsStub(arg1...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listKubernetesResourcesByFieldsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListKubernetesResourcesByFieldsCallCount() int {
	fake.listKubernetesResourcesByFieldsMutex.RLock()
	defer fake.listKubernetesResourcesByFieldsMutex.RUnlock()
	return len(fake.listKubernetesResourcesByFieldsArgsForCall)
}

func (fake *FakeClient) ListKubernetesResourcesByFieldsCalls(stub func(...string) ([]kubernetes.Resource, error)) {
	fake.listKubernetesResourcesByFieldsMutex.Lock()
	defer fake.listKubernetesResourcesByFieldsMutex.Unlock()
	fake.ListKubernetesResourcesByFieldsStub = stub
}

func (fake *FakeClient) ListKubernetesResourcesByFieldsArgsForCall(i int) []string {
	fake.listKubernetesResourcesByFieldsMutex.RLock()
	defer fake.listKubernetesResourcesByFieldsMutex.RUnlock()
	argsForCall := fake.listKubernetesResourcesByFieldsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ListKubernetesResourcesByFieldsReturns(result1 []kubernetes.Resource, result2 error) {
	fake.listKubernetesResourcesByFieldsMutex.Lock()
	defer fake.listKubernetesResourcesByFieldsMutex.Unlock()
	fake.ListKubernetesResourcesByFieldsStub = nil
	fake.listKubernetesResourcesByFieldsReturns = struct {
		result1 []kubernetes.Resource
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListKubernetesResourcesByFieldsReturnsOnCall(i int, result1 []kubernetes.Resource, result2 error) {
	fake.listKubernetesResourcesByFieldsMutex.Lock()
	defer fake.listKubernetesResourcesByFieldsMutex.Unlock()
	fake.ListKubernetesResourcesByFieldsStub = nil
	if fake.listKubernetesResourcesByFieldsReturnsOnCall == nil {
		fake.listKubernetesResourcesByFieldsReturnsOnCall = make(map[int]struct {
			result1 []kubernetes.Resource
			result2 error
		})
	}
	fake.listKubernetesResourcesByFieldsReturnsOnCall[i] = struct {
		result1 []kubernetes.Resource
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListKubernetesResourcesByTaskID(arg1 string) ([]kubernetes.Resource, error) {
	fake.listKubernetesResourcesByTaskIDMutex.Lock()
	ret, specificReturn := fake.listKubernetesResourcesByTaskIDReturnsOnCall[len(fake.listKubernetesResourcesByTaskIDArgsForCall)]
	fake.listKubernetesResourcesByTaskIDArgsForCall = append(fake.listKubernetesResourcesByTaskIDArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListKubernetesResourcesByTaskID", []interface{}{arg1})
	fake.listKubernetesResourcesByTaskIDMutex.Unlock()
	if fake.ListKubernetesResourcesByTaskIDStub != nil {
		return fake.ListKubernetesResourcesByTaskIDStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listKubernetesResourcesByTaskIDReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListKubernetesResourcesByTaskIDCallCount() int {
	fake.listKubernetesResourcesByTaskIDMutex.RLock()
	defer fake.listKubernetesResourcesByTaskIDMutex.RUnlock()
	return len(fake.listKubernetesResourcesByTaskIDArgsForCall)
}

func (fake *FakeClient) ListKubernetesResourcesByTaskIDCalls(stub func(string) ([]kubernetes.Resource, error)) {
	fake.listKubernetesResourcesByTaskIDMutex.Lock()
	defer fake.listKubernetesResourcesByTaskIDMutex.Unlock()
	fake.ListKubernetesResourcesByTaskIDStub = stub
}

func (fake *FakeClient) ListKubernetesResourcesByTaskIDArgsForCall(i int) string {
	fake.listKubernetesResourcesByTaskIDMutex.RLock()
	defer fake.listKubernetesResourcesByTaskIDMutex.RUnlock()
	argsForCall := fake.listKubernetesResourcesByTaskIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ListKubernetesResourcesByTaskIDReturns(result1 []kubernetes.Resource, result2 error) {
	fake.listKubernetesResourcesByTaskIDMutex.Lock()
	defer fake.listKubernetesResourcesByTaskIDMutex.Unlock()
	fake.ListKubernetesResourcesByTaskIDStub = nil
	fake.listKubernetesResourcesByTaskIDReturns = struct {
		result1 []kubernetes.Resource
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListKubernetesResourcesByTaskIDReturnsOnCall(i int, result1 []kubernetes.Resource, result2 error) {
	fake.listKubernetesResourcesByTaskIDMutex.Lock()
	defer fake.listKubernetesResourcesByTaskIDMutex.Unlock()
	fake.ListKubernetesResourcesByTaskIDStub = nil
	if fake.listKubernetesResourcesByTaskIDReturnsOnCall == nil {
		fake.listKubernetesResourcesByTaskIDReturnsOnCall = make(map[int]struct {
			result1 []kubernetes.Resource
			result2 error
		})
	}
	fake.listKubernetesResourcesByTaskIDReturnsOnCall[i] = struct {
		result1 []kubernetes.Resource
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListReadGroupsByAccountName(arg1 string) ([]string, error) {
	fake.listReadGroupsByAccountNameMutex.Lock()
	ret, specificReturn := fake.listReadGroupsByAccountNameReturnsOnCall[len(fake.listReadGroupsByAccountNameArgsForCall)]
	fake.listReadGroupsByAccountNameArgsForCall = append(fake.listReadGroupsByAccountNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListReadGroupsByAccountName", []interface{}{arg1})
	fake.listReadGroupsByAccountNameMutex.Unlock()
	if fake.ListReadGroupsByAccountNameStub != nil {
		return fake.ListReadGroupsByAccountNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listReadGroupsByAccountNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListReadGroupsByAccountNameCallCount() int {
	fake.listReadGroupsByAccountNameMutex.RLock()
	defer fake.listReadGroupsByAccountNameMutex.RUnlock()
	return len(fake.listReadGroupsByAccountNameArgsForCall)
}

func (fake *FakeClient) ListReadGroupsByAccountNameCalls(stub func(string) ([]string, error)) {
	fake.listReadGroupsByAccountNameMutex.Lock()
	defer fake.listReadGroupsByAccountNameMutex.Unlock()
	fake.ListReadGroupsByAccountNameStub = stub
}

func (fake *FakeClient) ListReadGroupsByAccountNameArgsForCall(i int) string {
	fake.listReadGroupsByAccountNameMutex.RLock()
	defer fake.listReadGroupsByAccountNameMutex.RUnlock()
	argsForCall := fake.listReadGroupsByAccountNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ListReadGroupsByAccountNameReturns(result1 []string, result2 error) {
	fake.listReadGroupsByAccountNameMutex.Lock()
	defer fake.listReadGroupsByAccountNameMutex.Unlock()
	fake.ListReadGroupsByAccountNameStub = nil
	fake.listReadGroupsByAccountNameReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListReadGroupsByAccountNameReturnsOnCall(i int, result1 []string, result2 error) {
	fake.listReadGroupsByAccountNameMutex.Lock()
	defer fake.listReadGroupsByAccountNameMutex.Unlock()
	fake.ListReadGroupsByAccountNameStub = nil
	if fake.listReadGroupsByAccountNameReturnsOnCall == nil {
		fake.listReadGroupsByAccountNameReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.listReadGroupsByAccountNameReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListWriteGroupsByAccountName(arg1 string) ([]string, error) {
	fake.listWriteGroupsByAccountNameMutex.Lock()
	ret, specificReturn := fake.listWriteGroupsByAccountNameReturnsOnCall[len(fake.listWriteGroupsByAccountNameArgsForCall)]
	fake.listWriteGroupsByAccountNameArgsForCall = append(fake.listWriteGroupsByAccountNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListWriteGroupsByAccountName", []interface{}{arg1})
	fake.listWriteGroupsByAccountNameMutex.Unlock()
	if fake.ListWriteGroupsByAccountNameStub != nil {
		return fake.ListWriteGroupsByAccountNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listWriteGroupsByAccountNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListWriteGroupsByAccountNameCallCount() int {
	fake.listWriteGroupsByAccountNameMutex.RLock()
	defer fake.listWriteGroupsByAccountNameMutex.RUnlock()
	return len(fake.listWriteGroupsByAccountNameArgsForCall)
}

func (fake *FakeClient) ListWriteGroupsByAccountNameCalls(stub func(string) ([]string, error)) {
	fake.listWriteGroupsByAccountNameMutex.Lock()
	defer fake.listWriteGroupsByAccountNameMutex.Unlock()
	fake.ListWriteGroupsByAccountNameStub = stub
}

func (fake *FakeClient) ListWriteGroupsByAccountNameArgsForCall(i int) string {
	fake.listWriteGroupsByAccountNameMutex.RLock()
	defer fake.listWriteGroupsByAccountNameMutex.RUnlock()
	argsForCall := fake.listWriteGroupsByAccountNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ListWriteGroupsByAccountNameReturns(result1 []string, result2 error) {
	fake.listWriteGroupsByAccountNameMutex.Lock()
	defer fake.listWriteGroupsByAccountNameMutex.Unlock()
	fake.ListWriteGroupsByAccountNameStub = nil
	fake.listWriteGroupsByAccountNameReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListWriteGroupsByAccountNameReturnsOnCall(i int, result1 []string, result2 error) {
	fake.listWriteGroupsByAccountNameMutex.Lock()
	defer fake.listWriteGroupsByAccountNameMutex.Unlock()
	fake.ListWriteGroupsByAccountNameStub = nil
	if fake.listWriteGroupsByAccountNameReturnsOnCall == nil {
		fake.listWriteGroupsByAccountNameReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.listWriteGroupsByAccountNameReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createKubernetesProviderMutex.RLock()
	defer fake.createKubernetesProviderMutex.RUnlock()
	fake.createKubernetesResourceMutex.RLock()
	defer fake.createKubernetesResourceMutex.RUnlock()
	fake.createReadPermissionMutex.RLock()
	defer fake.createReadPermissionMutex.RUnlock()
	fake.createWritePermissionMutex.RLock()
	defer fake.createWritePermissionMutex.RUnlock()
	fake.deleteKubernetesProviderMutex.RLock()
	defer fake.deleteKubernetesProviderMutex.RUnlock()
	fake.getKubernetesProviderMutex.RLock()
	defer fake.getKubernetesProviderMutex.RUnlock()
	fake.listKubernetesAccountsBySpinnakerAppMutex.RLock()
	defer fake.listKubernetesAccountsBySpinnakerAppMutex.RUnlock()
	fake.listKubernetesClustersByApplicationMutex.RLock()
	defer fake.listKubernetesClustersByApplicationMutex.RUnlock()
	fake.listKubernetesClustersByFieldsMutex.RLock()
	defer fake.listKubernetesClustersByFieldsMutex.RUnlock()
	fake.listKubernetesProvidersMutex.RLock()
	defer fake.listKubernetesProvidersMutex.RUnlock()
	fake.listKubernetesProvidersAndPermissionsMutex.RLock()
	defer fake.listKubernetesProvidersAndPermissionsMutex.RUnlock()
	fake.listKubernetesResourceNamesByAccountNameAndKindAndNamespaceMutex.RLock()
	defer fake.listKubernetesResourceNamesByAccountNameAndKindAndNamespaceMutex.RUnlock()
	fake.listKubernetesResourcesByFieldsMutex.RLock()
	defer fake.listKubernetesResourcesByFieldsMutex.RUnlock()
	fake.listKubernetesResourcesByTaskIDMutex.RLock()
	defer fake.listKubernetesResourcesByTaskIDMutex.RUnlock()
	fake.listReadGroupsByAccountNameMutex.RLock()
	defer fake.listReadGroupsByAccountNameMutex.RUnlock()
	fake.listWriteGroupsByAccountNameMutex.RLock()
	defer fake.listWriteGroupsByAccountNameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sql.Client = new(FakeClient)
