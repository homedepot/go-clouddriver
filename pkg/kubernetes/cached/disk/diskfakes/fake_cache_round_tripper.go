// Code generated by counterfeiter. DO NOT EDIT.
package diskfakes

import (
	"net/http"
	"sync"

	"github.com/homedepot/go-clouddriver/pkg/kubernetes/cached/disk"
)

type FakeCacheRoundTripper struct {
	RoundTripStub        func(req *http.Request) (*http.Response, error)
	roundTripMutex       sync.RWMutex
	roundTripArgsForCall []struct {
		req *http.Request
	}
	roundTripReturns struct {
		result1 *http.Response
		result2 error
	}
	roundTripReturnsOnCall map[int]struct {
		result1 *http.Response
		result2 error
	}
	CancelRequestStub        func(req *http.Request)
	cancelRequestMutex       sync.RWMutex
	cancelRequestArgsForCall []struct {
		req *http.Request
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCacheRoundTripper) RoundTrip(req *http.Request) (*http.Response, error) {
	fake.roundTripMutex.Lock()
	ret, specificReturn := fake.roundTripReturnsOnCall[len(fake.roundTripArgsForCall)]
	fake.roundTripArgsForCall = append(fake.roundTripArgsForCall, struct {
		req *http.Request
	}{req})
	fake.recordInvocation("RoundTrip", []interface{}{req})
	fake.roundTripMutex.Unlock()
	if fake.RoundTripStub != nil {
		return fake.RoundTripStub(req)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.roundTripReturns.result1, fake.roundTripReturns.result2
}

func (fake *FakeCacheRoundTripper) RoundTripCallCount() int {
	fake.roundTripMutex.RLock()
	defer fake.roundTripMutex.RUnlock()
	return len(fake.roundTripArgsForCall)
}

func (fake *FakeCacheRoundTripper) RoundTripArgsForCall(i int) *http.Request {
	fake.roundTripMutex.RLock()
	defer fake.roundTripMutex.RUnlock()
	return fake.roundTripArgsForCall[i].req
}

func (fake *FakeCacheRoundTripper) RoundTripReturns(result1 *http.Response, result2 error) {
	fake.RoundTripStub = nil
	fake.roundTripReturns = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeCacheRoundTripper) RoundTripReturnsOnCall(i int, result1 *http.Response, result2 error) {
	fake.RoundTripStub = nil
	if fake.roundTripReturnsOnCall == nil {
		fake.roundTripReturnsOnCall = make(map[int]struct {
			result1 *http.Response
			result2 error
		})
	}
	fake.roundTripReturnsOnCall[i] = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeCacheRoundTripper) CancelRequest(req *http.Request) {
	fake.cancelRequestMutex.Lock()
	fake.cancelRequestArgsForCall = append(fake.cancelRequestArgsForCall, struct {
		req *http.Request
	}{req})
	fake.recordInvocation("CancelRequest", []interface{}{req})
	fake.cancelRequestMutex.Unlock()
	if fake.CancelRequestStub != nil {
		fake.CancelRequestStub(req)
	}
}

func (fake *FakeCacheRoundTripper) CancelRequestCallCount() int {
	fake.cancelRequestMutex.RLock()
	defer fake.cancelRequestMutex.RUnlock()
	return len(fake.cancelRequestArgsForCall)
}

func (fake *FakeCacheRoundTripper) CancelRequestArgsForCall(i int) *http.Request {
	fake.cancelRequestMutex.RLock()
	defer fake.cancelRequestMutex.RUnlock()
	return fake.cancelRequestArgsForCall[i].req
}

func (fake *FakeCacheRoundTripper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.roundTripMutex.RLock()
	defer fake.roundTripMutex.RUnlock()
	fake.cancelRequestMutex.RLock()
	defer fake.cancelRequestMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCacheRoundTripper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ disk.CacheRoundTripper = new(FakeCacheRoundTripper)
