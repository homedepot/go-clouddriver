// Code generated by counterfeiter. DO NOT EDIT.
package front50fakes

import (
	"sync"

	"github.com/homedepot/go-clouddriver/internal/front50"
)

type FakeClient struct {
	ProjectStub        func(string) (front50.Response, error)
	projectMutex       sync.RWMutex
	projectArgsForCall []struct {
		arg1 string
	}
	projectReturns struct {
		result1 front50.Response
		result2 error
	}
	projectReturnsOnCall map[int]struct {
		result1 front50.Response
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) Project(arg1 string) (front50.Response, error) {
	fake.projectMutex.Lock()
	ret, specificReturn := fake.projectReturnsOnCall[len(fake.projectArgsForCall)]
	fake.projectArgsForCall = append(fake.projectArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Project", []interface{}{arg1})
	fake.projectMutex.Unlock()
	if fake.ProjectStub != nil {
		return fake.ProjectStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.projectReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ProjectCallCount() int {
	fake.projectMutex.RLock()
	defer fake.projectMutex.RUnlock()
	return len(fake.projectArgsForCall)
}

func (fake *FakeClient) ProjectCalls(stub func(string) (front50.Response, error)) {
	fake.projectMutex.Lock()
	defer fake.projectMutex.Unlock()
	fake.ProjectStub = stub
}

func (fake *FakeClient) ProjectArgsForCall(i int) string {
	fake.projectMutex.RLock()
	defer fake.projectMutex.RUnlock()
	argsForCall := fake.projectArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ProjectReturns(result1 front50.Response, result2 error) {
	fake.projectMutex.Lock()
	defer fake.projectMutex.Unlock()
	fake.ProjectStub = nil
	fake.projectReturns = struct {
		result1 front50.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ProjectReturnsOnCall(i int, result1 front50.Response, result2 error) {
	fake.projectMutex.Lock()
	defer fake.projectMutex.Unlock()
	fake.ProjectStub = nil
	if fake.projectReturnsOnCall == nil {
		fake.projectReturnsOnCall = make(map[int]struct {
			result1 front50.Response
			result2 error
		})
	}
	fake.projectReturnsOnCall[i] = struct {
		result1 front50.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.projectMutex.RLock()
	defer fake.projectMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ front50.Client = new(FakeClient)
